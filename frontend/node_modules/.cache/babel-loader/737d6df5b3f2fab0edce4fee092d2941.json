{"ast":null,"code":"var _jsxFileName = \"E:\\\\FWD\\\\Projects\\\\FSND-master\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      document.getElementsByClassName('list')[0].classList.add('active');\n      $.ajax({\n        url: \"http://127.0.0.1:5000/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      let categoryList = document.getElementsByClassName('categories-list')[0].getElementsByTagName('LI');\n\n      for (let index = 0; index < categoryList.length; index++) {\n        categoryList[index].classList.remove('active');\n      }\n\n      document.getElementsByClassName('category' + id)[0].classList.add('active');\n      $.ajax({\n        url: \"http://127.0.0.1:5000/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"http://127.0.0.1:5000/questions/search?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"http://127.0.0.1:5000/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  componentWillMount() {}\n\n  selectPage(num) {\n    let search_term = document.getElementsByClassName(\"search_term\")[0].value;\n    console.log(search_term);\n\n    if (search_term = \"\") {\n      this.setState({\n        page: num\n      }, () => this.getQuestions());\n    } else {\n      this.setState({\n        page: num\n      }, () => this.submitSearch(search_term));\n    }\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, Object.keys(this.state.categories).map(id => React.createElement(\"li\", {\n      className: \"category\".concat(this.state.categories[id].id),\n      key: id,\n      onClick: () => {\n        this.getByCategory(this.state.categories[id].id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.categories[id].type, React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(this.state.categories[id].type, \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map(q => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories.find(c => c.id == q.category).type,\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["E:\\FWD\\Projects\\FSND-master\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","document","getElementsByClassName","classList","add","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","id","categoryList","getElementsByTagName","index","length","remove","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","componentWillMount","selectPage","num","search_term","value","console","log","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","Object","keys","map","q","question","answer","find","c","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n  componentWillMount(){\n  }\n\n  getQuestions = () => {\n    document.getElementsByClassName('list')[0].classList.add('active');\n    $.ajax({\n      url: `http://127.0.0.1:5000/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    let search_term=document.getElementsByClassName(\"search_term\")[0].value;\n    console.log(search_term)\n    if(search_term=\"\"){\n      this.setState({page: num}, () => this.getQuestions());\n    }else{\n      this.setState({page: num}, () => this.submitSearch(search_term));\n    }\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    let categoryList= document.getElementsByClassName('categories-list')[0].getElementsByTagName('LI');\n    for (let index = 0; index < categoryList.length; index++) {\n      categoryList[index].classList.remove('active');\n    }\n    document.getElementsByClassName('category'+id)[0].classList.add('active');\n    $.ajax({\n      url: `http://127.0.0.1:5000/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `http://127.0.0.1:5000/questions/search?page=${this.state.page}`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `http://127.0.0.1:5000/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {Object.keys(this.state.categories).map((id) => (\n              <li className={`category${this.state.categories[id].id}`} key={id} onClick={() => {this.getByCategory(this.state.categories[id].id)}}>\n                {this.state.categories[id].type}\n                <img className=\"category\" src={`${this.state.categories[id].type}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories.find(c => c.id == q.category).type} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}